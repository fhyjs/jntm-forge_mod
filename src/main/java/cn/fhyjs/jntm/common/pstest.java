package cn.fhyjs.jntm.common;

import cn.fhyjs.jntm.Jntm;
import cn.fhyjs.jntm.tickratechanger.api.TickrateAPI;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/* Generated by noteblockstudio2java. You may need to perform the "Alt + enter" operation manually */
public class pstest extends Thread{
    private final EntityPlayer entityplayer; private final World world;private final BlockPos bp;private String[] split;

    public pstest(EntityPlayer entityplayer, World world, BlockPos bp,ResourceLocation rl) {
        this.entityplayer=entityplayer;
        this.world=world;
        this.bp=bp;
        try {
            InputStream is;
            String iss;
            is=Minecraft.getMinecraft().mcDefaultResourcePack.getInputStream(rl);
            iss=readLine(is);
            iss=iss.replace("\r","");
            this.split=iss.split("\n");
        } catch (IOException e) {
            Jntm.logger.error(new RuntimeException(e));
        }
    }
    public pstest(EntityPlayer entityplayer, World world, BlockPos bp,File f) {
        this.entityplayer=entityplayer;
        this.world=world;
        this.bp=bp;
        try {
            InputStream is;
            String iss;
            is=new FileInputStream(f);
            iss=readLine(is);
            iss=iss.replace("\r","");
            this.split=iss.split("\n");
        } catch (IOException e) {
            Jntm.logger.error(new RuntimeException(e));
        }
    }
    @Override
    public void run(){
        Map<String,String> stringMap = new HashMap<>();
        for (int i=0;i<=split.length;i++){
            String[] ts;
            for (String s : stringMap.keySet()) {
                for (int j=0;j<split.length;j++){
                    split[j]=split[j].replace(s,stringMap.get(s));
                }
            }
            stringMap.clear();
            try {
                 ts= split[i].split(" ");
                WorldServer worldserver = (WorldServer)world;
                if (Objects.equals(ts[0], "playsound")){
                    ts[1]=ts[1].replace("note_block","note");
                    try {
                        worldserver.playSound(entityplayer, bp, Objects.requireNonNull(SoundEvent.REGISTRY.getObject(new ResourceLocation(ts[1]))), SoundCategory.getByName(ts[2]), Float.parseFloat(ts[3]), Float.parseFloat(ts[4]));
                        worldserver.spawnParticle(EnumParticleTypes.NOTE, true, bp.getX()+1/4d, bp.getY()+1, bp.getZ()+1/4d,1, 1/4d,0.1, 1/4d,1, 0);
                    }catch (Throwable e){
                        StringWriter stringWriter = new StringWriter();
                        PrintWriter printWriter = new PrintWriter(stringWriter);
                        e.printStackTrace(printWriter);
                        Jntm.logger.error(stringWriter +":"+ts[1]);
                    }
                }
                if (Objects.equals(ts[0], "timeout")){
                    try {
                        worldserver.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, true, bp.getX()+1/4d, bp.getY()+1, bp.getZ()+1/4d,50, 1/4d,0.1, 1/4d,0.1, 0);
                        Thread.sleep((long) (Integer.parseInt(ts[1]) * (20/TickrateAPI.getServerTickrate())));
                    } catch (InterruptedException e) {
                        Jntm.logger.error(new RuntimeException(e));
                    }
                }
                if (Objects.equals(ts[0], "replace")){
                    stringMap.put(ts[1],ts[2]);
                }
            }catch (ArrayIndexOutOfBoundsException ignored){}
        }
    }
    /**
     * Read a line of data from the underlying inputstream
     *
     * @return a line stripped of line terminators
     */
    public static String readLine(InputStream inputStream) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));

        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line).append(System.lineSeparator());
        }
        return sb.toString();
    }
}
