import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
buildscript {
    repositories {
        maven { url = 'https://libraries.minecraft.net/' }
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}


apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '11.45.14'
group = 'cn.fhyjs.jntm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'jntm'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

     accessTransformer = file('src/main/resources/META-INF/dev_accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'fml.coreMods.load', 'cn.fhyjs.jntm.tickratechanger.TickrateChanger'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'fml.coreMods.load', 'cn.fhyjs.jntm.tickratechanger.TickrateChanger'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
    processResources
            {
                // this will ensure that this task is redone when the versions change.
                inputs.property "version", project.version
                inputs.property "mcversion", "1.12.2"

                // replace stuff in mcmod.info, nothing else
                from(sourceSets.main.resources.srcDirs) {
                    include 'mcmod.info'

                    // replace version and mcversion
                    expand 'version':project.version, 'mcversion':"1.12.2"
                }

                // copy everything else, thats not the mcmod.info
                from(sourceSets.main.resources.srcDirs) {
                    exclude 'mcmod.info'
                }
            }
}
repositories {
    maven { url 'https://maven.blamejared.com' }
    maven {url "https://repo1.maven.org/maven2/"}
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}
task signJar(type: SignJar, dependsOn: jar) {

    keyStore = file("hanana.jks")
    storePass = '12345678q'
    alias = 'hananaapps'
    keyPass ='12345678q'

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
dependencies {
    compile "vazkii.patchouli:Patchouli:${patchouli_version}"
    implementation "net.lingala.zip4j:zip4j:2.11.2"
    compile fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2:3.0.31')
}
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    compile fileTree('libs')
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Main-Class": "cn.fhyjs.jntm.dcc",
            "Specification-Title": "jntm",
            "Specification-Vendor": "jntmsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            'FMLAT': 'jntm_at.cfg',
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"jntmsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "ContainedDeps": "zip4j-2.11.2.jar",
            "FMLCorePlugin": "cn.fhyjs.jntm.tickratechanger.TickrateChanger",
            'FMLCorePluginContainsFMLMod': 'true',
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
sourceSets {
    main { output.resourcesDir = output.classesDir }
}